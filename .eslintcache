[{"C:\\Users\\Abhishek.Hatti\\Desktop\\01-starting-setup\\src\\index.js":"1","C:\\Users\\Abhishek.Hatti\\Desktop\\01-starting-setup\\src\\App.js":"2","C:\\Users\\Abhishek.Hatti\\Desktop\\01-starting-setup\\src\\Components\\Dashboard.jsx":"3","C:\\Users\\Abhishek.Hatti\\Desktop\\01-starting-setup\\src\\Components\\SearchAppBar.jsx":"4","C:\\Users\\Abhishek.Hatti\\Desktop\\01-starting-setup\\src\\Components\\UserInputForm.jsx":"5","C:\\Users\\Abhishek.Hatti\\Desktop\\01-starting-setup\\src\\Components\\ScoreChart.jsx":"6","C:\\Users\\Abhishek.Hatti\\Desktop\\01-starting-setup\\src\\Components\\ChartBar.jsx":"7","C:\\Users\\Abhishek.Hatti\\Desktop\\01-starting-setup\\src\\Components\\CardContainer.jsx":"8","C:\\Users\\Abhishek.Hatti\\Desktop\\01-starting-setup\\src\\Components\\Welcome.jsx":"9","C:\\Users\\Abhishek.Hatti\\Desktop\\01-starting-setup\\src\\Components\\ScoreCard.jsx":"10","C:\\Users\\Abhishek.Hatti\\Desktop\\01-starting-setup\\src\\Components\\InputCard\\Inputcard.jsx":"11"},{"size":142,"mtime":1622120148239,"results":"12","hashOfConfig":"13"},{"size":633,"mtime":1636874881621,"results":"14","hashOfConfig":"13"},{"size":1175,"mtime":1636875008558,"results":"15","hashOfConfig":"13"},{"size":3386,"mtime":1622535936838,"results":"16","hashOfConfig":"17"},{"size":2031,"mtime":1623822483172,"results":"18","hashOfConfig":"17"},{"size":775,"mtime":1623822505736,"results":"19","hashOfConfig":"13"},{"size":2870,"mtime":1636964372865,"results":"20","hashOfConfig":"13"},{"size":909,"mtime":1622977118497,"results":"21","hashOfConfig":"22"},{"size":4332,"mtime":1643971600815,"results":"23","hashOfConfig":"13"},{"size":2426,"mtime":1625724902383,"results":"24","hashOfConfig":"13"},{"size":14182,"mtime":1641146541197,"results":"25","hashOfConfig":"13"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"u4dcmg",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"36"},"qcgnk8",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},"bhljls",{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"28"},"C:\\Users\\Abhishek.Hatti\\Desktop\\01-starting-setup\\src\\index.js",[],["54","55"],"C:\\Users\\Abhishek.Hatti\\Desktop\\01-starting-setup\\src\\App.js",[],"C:\\Users\\Abhishek.Hatti\\Desktop\\01-starting-setup\\src\\Components\\Dashboard.jsx",[],"C:\\Users\\Abhishek.Hatti\\Desktop\\01-starting-setup\\src\\Components\\SearchAppBar.jsx",["56"],"import React from \"react\";\r\nimport { useState } from \"react\";\r\n// import { createMuiTheme } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\nimport { fade, makeStyles } from \"@material-ui/core/styles\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  appBar: {\r\n    backgroundColor: \"#ED6D2D\",\r\n  },\r\n\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    display: \"none\",\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      display: \"block\",\r\n    },\r\n  },\r\n  search: {\r\n    position: \"relative\",\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: fade(theme.palette.common.white, 0.15),\r\n    \"&:hover\": {\r\n      backgroundColor: fade(theme.palette.common.white, 0.25),\r\n    },\r\n    marginLeft: 0,\r\n    width: \"100%\",\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      marginLeft: theme.spacing(1),\r\n      width: \"auto\",\r\n    },\r\n  },\r\n  searchIcon: {\r\n    padding: theme.spacing(0, 2),\r\n    height: \"100%\",\r\n    position: \"absolute\",\r\n    pointerEvents: \"none\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  inputRoot: {\r\n    color: \"inherit\",\r\n  },\r\n  inputInput: {\r\n    padding: theme.spacing(1, 1, 1, 0),\r\n    // vertical padding + font size from searchIcon\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n    transition: theme.transitions.create(\"width\"),\r\n    width: \"100%\",\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: \"12ch\",\r\n      \"&:focus\": {\r\n        width: \"20ch\",\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function SearchAppBar(props) {\r\n  const classes = useStyles();\r\n  const [title, setTitle] = useState(\"Lets Play !!!!\");\r\n  const [searchInput, setSearcInput] = useState(\"\");\r\n  const clickHandler = () => {\r\n    setTitle(\"Pizza Bar Updated\");\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\" className={classes.appBar}>\r\n        <Toolbar>\r\n          <IconButton\r\n            edge=\"start\"\r\n            className={classes.menuButton}\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={clickHandler}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography className={classes.title} variant=\"h6\" noWrap>\r\n            {title}\r\n          </Typography>\r\n          <div className={classes.search}>\r\n            <div className={classes.searchIcon}>\r\n              <SearchIcon />\r\n            </div>\r\n            <InputBase\r\n              placeholder=\"Searchâ€¦\"\r\n              classes={{\r\n                root: classes.inputRoot,\r\n                input: classes.inputInput,\r\n              }}\r\n              inputProps={{ \"aria-label\": \"search\" }}\r\n              onChange={(e) => {\r\n                console.log(e.target.value);\r\n                setSearcInput(e.target.value);\r\n                props.handleSearch(e.target.value);\r\n              }}\r\n            />\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n      {/* <h2>{searchInput}</h2> */}\r\n    </div>\r\n  );\r\n}\r\n",["57","58"],"C:\\Users\\Abhishek.Hatti\\Desktop\\01-starting-setup\\src\\Components\\UserInputForm.jsx",[],"C:\\Users\\Abhishek.Hatti\\Desktop\\01-starting-setup\\src\\Components\\ScoreChart.jsx",[],"C:\\Users\\Abhishek.Hatti\\Desktop\\01-starting-setup\\src\\Components\\ChartBar.jsx",[],"C:\\Users\\Abhishek.Hatti\\Desktop\\01-starting-setup\\src\\Components\\CardContainer.jsx",[],["59","60"],"C:\\Users\\Abhishek.Hatti\\Desktop\\01-starting-setup\\src\\Components\\Welcome.jsx",["61","62"],"import dashboardImage from \"../Components/Utilities/images/dasboardImage.jpg\";\r\nimport iconImage from \"./Utilities/images/subStepIcon.jpg\";\r\nimport { fade, makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from '@mui/material/Button';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles({\r\n  upperDashboardContainer: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    backgroundColor: \"#1F2229\",\r\n  },\r\n  lowerDashboardContainer: {\r\n    backgroundColor: \"#1D2027\",\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n  },\r\n  leftContainer: {\r\n    width: \"50%\",\r\n    display: \"flex\",\r\n    paddingTop: \"9%\",\r\n    paddingLeft: \"12%\",\r\n  },\r\n  innerLeftContainer: {},\r\n\r\n  iconImageContiner: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    width: \"100%\",\r\n  },\r\n\r\n  stepsCard: {\r\n    width: \"28%\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"center\",\r\n  },\r\n\r\n  stepsCardHeader: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    color: \"white\",\r\n  },\r\n\r\n  stepsCardContent: {\r\n    fontSize: \"16px\",\r\n    color: \"#767F8F\",\r\n    textAlign: \"center\",\r\n  },\r\n\r\n  playButton: {\r\n    fontSize: \"14px\",\r\n    letterSpacing: \"2px\",\r\n    fontWeight: \"bolder\",\r\n\r\n    textTransform: \"uppercase\",\r\n\r\n    border: \"none\",\r\n    borderRadius: \"2px\",\r\n    cursor: \"pointer\",\r\n    justifyContent: \"center\",\r\n\r\n    height: \"48px\",\r\n    width: \"200px\",\r\n    background: \"white\",\r\n    color: \"#242831\",\r\n    \"&:hover\": {\r\n      backgroundColor: \"#0370D7\",\r\n      color: \"white\",\r\n    },\r\n  },\r\n});\r\n\r\nconst WelcomePage = () => {\r\n  const classes = useStyles();\r\n  let history = useHistory();\r\n  return (\r\n    <div>\r\n      <div className={classes.upperDashboardContainer}>\r\n        <div className={classes.leftContainer}>\r\n          <div className={classes.innerLeftContainer}>\r\n            <h1 style={{ color: \"white\" }}>\r\n              Play Swap And Guess to Swap Your Memory\r\n            </h1>\r\n            <p style={{ color: \"#8590A2\", fontSize: \"28px\" }}>\r\n              This game includes remembering random numbers, swap them, guess\r\n              accordingly finally you will get score and you can track your\r\n              score.\r\n            </p>\r\n\r\n            <Button\r\n              className={classes.playButton}\r\n              onClick={() => {\r\n                history.push(\"/play\");\r\n              }}\r\n            >\r\n              Play\r\n            </Button>\r\n          </div>\r\n        </div>\r\n        <img src={dashboardImage} alt=\"Image\" style={{ width: \"50%\" }} />\r\n      </div>\r\n      <div className={classes.lowerDashboardContainer}>\r\n        <div className={classes.stepsCard}>\r\n          <div className={classes.iconImageContiner}>\r\n            <img src={iconImage} alt=\"\" style={{ width: \"150px\" }} />\r\n          </div>\r\n          <div className={classes.stepsCardHeader}>\r\n            <h3>Remember</h3>\r\n          </div>\r\n          <p className={classes.stepsCardContent}>\r\n            Remember number present on fields to guess accordingly,remember the\r\n            position of the number like a matrix form, need to guess number with\r\n            position!!!\r\n          </p>\r\n        </div>\r\n        <div className={classes.stepsCard}>\r\n          <div className={classes.iconImageContiner}>\r\n            <img src={iconImage} alt=\"\" style={{ width: \"150px\" }} />\r\n          </div>\r\n          <div className={classes.stepsCardHeader}>\r\n            <h3>Guess</h3>\r\n          </div>\r\n          <p className={classes.stepsCardContent}>\r\n            Click on guess button ,guess the swapped numbers accordingly and\r\n            dont forget to guess all numbers, there is no negative scoring !!!\r\n          </p>\r\n        </div>\r\n        <div className={classes.stepsCard}>\r\n          <div className={classes.iconImageContiner}>\r\n            <img src={iconImage} alt=\"\" style={{ width: \"150px\" }} />\r\n          </div>\r\n          <div className={classes.stepsCardHeader}>\r\n            <h3>Verify</h3>\r\n          </div>\r\n          <p className={classes.stepsCardContent}>\r\n            Click on Verify to get your score based on your correct gussed\r\n            number, retry if want to improve memory power!!!\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WelcomePage;\r\n","C:\\Users\\Abhishek.Hatti\\Desktop\\01-starting-setup\\src\\Components\\ScoreCard.jsx",[],"C:\\Users\\Abhishek.Hatti\\Desktop\\01-starting-setup\\src\\Components\\InputCard\\Inputcard.jsx",["63","64","65","66"],"import { useState, useEffect, useRef } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport axios from \"axios\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { fade, makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n  mainCardContainer: {\r\n    display: \"block\",\r\n    marginLeft: \"auto\",\r\n    marginRight: \"auto\",\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    backgroundColor: \"#1E2228\",\r\n    padding: \"3%\",\r\n  },\r\n\r\n  input: {\r\n    color: \"#15181D\",\r\n    textAlign: \"center\",\r\n    fontSize: \"3em\",\r\n\r\n    border: \"2px solid black\",\r\n    borderRadius: 3,\r\n    margin: 10,\r\n    width: 100,\r\n    height: 100,\r\n    \"&:error\": {\r\n      Color: \"red\",\r\n    },\r\n    \"&::placeholder\": {\r\n      color: \"#a6a6a6\",\r\n    },\r\n  },\r\n\r\n  inputCardWrapper: {\r\n    width: 480,\r\n    height: 480,\r\n  },\r\n  inputCardContainer: {\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  },\r\n\r\n  buttonContainer: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  playButton: {\r\n    fontSize: \"14px\",\r\n    letterSpacing: \"2px\",\r\n    fontWeight: \"bolder\",\r\n\r\n    textTransform: \"uppercase\",\r\n\r\n    border: \"none\",\r\n    borderRadius: \"2px\",\r\n    cursor: \"pointer\",\r\n    justifyContent: \"center\",\r\n    margin: 10,\r\n    height: \"48px\",\r\n    width: \"200px\",\r\n    background: \"white\",\r\n    color: \"#242831\",\r\n    \"&:hover\": {\r\n      backgroundColor: \"#0370D7\",\r\n      color: \"white\",\r\n    },\r\n    \"&:disabled\": {\r\n      cursor: \"not-allowed\",\r\n      pointerEvents: \"auto\",\r\n      background: \"gray\",\r\n      color: \"black\",\r\n    },\r\n  },\r\n  scoreContainer: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n\r\n  scoreTextContainer: {\r\n    width: 480,\r\n    height: 480,\r\n    display: \"flex\",\r\n\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n});\r\n\r\nconst numbers = [\r\n  [\r\n    {\r\n      value: Math.floor(Math.random() * 10),\r\n      name: \"Number1\",\r\n    },\r\n    {\r\n      value: Math.floor(Math.random() * 10),\r\n      name: \"Number2\",\r\n    },\r\n    {\r\n      value: Math.floor(Math.random() * 10),\r\n      name: \"Number3\",\r\n    },\r\n    {\r\n      value: Math.floor(Math.random() * 10),\r\n      name: \"Number4\",\r\n    },\r\n  ],\r\n  [\r\n    {\r\n      value: Math.floor(Math.random() * 10),\r\n      name: \"Number5\",\r\n    },\r\n    {\r\n      value: Math.floor(Math.random() * 10),\r\n      name: \"Number6\",\r\n    },\r\n    {\r\n      value: Math.floor(Math.random() * 10),\r\n      name: \"Number7\",\r\n    },\r\n    {\r\n      value: Math.floor(Math.random() * 10),\r\n      name: \"Number8\",\r\n    },\r\n  ],\r\n  [\r\n    {\r\n      value: Math.floor(Math.random() * 10),\r\n      name: \"Number9\",\r\n    },\r\n    {\r\n      value: Math.floor(Math.random() * 10),\r\n      name: \"Number10\",\r\n    },\r\n    {\r\n      value: Math.floor(Math.random() * 10),\r\n      name: \"Number11\",\r\n    },\r\n    {\r\n      value: Math.floor(Math.random() * 10),\r\n      name: \"Number12\",\r\n    },\r\n  ],\r\n  [\r\n    {\r\n      value: Math.floor(Math.random() * 10),\r\n      name: \"Number13\",\r\n    },\r\n    {\r\n      value: Math.floor(Math.random() * 10),\r\n      name: \"Number14\",\r\n    },\r\n    {\r\n      value: Math.floor(Math.random() * 10),\r\n      name: \"Number15\",\r\n    },\r\n    {\r\n      value: Math.floor(Math.random() * 10),\r\n      name: \"Number16\",\r\n    },\r\n  ],\r\n];\r\n\r\nconst InputCard = (props) => {\r\n  const classes = useStyles();\r\n\r\n  const inputFormRef = useRef();\r\n  const [gussedNumbers, setGussedNumbers] = useState(null);\r\n  const [prevNumbers, setPrevNumbers] = useState([]);\r\n  const [defaultNumbers, setDefaulNumbers] = useState(numbers);\r\n  const [inputMode, setInputMode] = useState(false);\r\n  const [swapCount, setSwapCount] = useState(0);\r\n  const [currentScore, setCurrentScore] = useState(null);\r\n  const [formError, setFormError] = useState(false);\r\n\r\n  const [defaultForm, setFormTitle] = useState(true);\r\n  const [flexDirection, setFlexDirection] = useState({\r\n    upperFlexDirection: \"column\",\r\n    lowerFlexDirection: \"row\",\r\n  });\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n   \r\n    console.log('ran')\r\n  });\r\n  const CardWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: ${(props) => props.flexDirection};\r\n\r\n    width: \"160px\";\r\n  `;\r\n\r\n  const swapRight = () => {\r\n    setSwapCount(swapCount + 1);\r\n\r\n    setFlexDirection({\r\n      ...flexDirection,\r\n      upperFlexDirection: \"row-reverse\",\r\n      lowerFlexDirection: \"column\",\r\n    });\r\n\r\n    console.log(swapCount);\r\n  };\r\n\r\n  const swapLeft = () => {\r\n    setSwapCount(swapCount - 1);\r\n\r\n    console.log(swapCount);\r\n  };\r\n\r\n  const guess = (e) => {\r\n    e.preventDefault();\r\n    debugger;\r\n    const d = Object.values(e.target).reduce((resultArray, item) => {\r\n      if (item.name && item.value)\r\n        resultArray.push({\r\n          name: item.name,\r\n          value: item.value,\r\n        });\r\n      return resultArray;\r\n    }, []);\r\n\r\n    console.log(d);\r\n\r\n    setPrevNumbers([...d]);\r\n\r\n    setDefaulNumbers([\r\n      [\r\n        {\r\n          value: \"\",\r\n          name: \"Number1\",\r\n        },\r\n        {\r\n          value: \"\",\r\n          name: \"Number2\",\r\n        },\r\n        {\r\n          value: \"\",\r\n          name: \"Number3\",\r\n        },\r\n        {\r\n          value: \"\",\r\n          name: \"Number4\",\r\n        },\r\n      ],\r\n      [\r\n        {\r\n          value: \"\",\r\n          name: \"Number5\",\r\n        },\r\n        {\r\n          value: \"\",\r\n          name: \"Number6\",\r\n        },\r\n        {\r\n          value: \"\",\r\n          name: \"Number7\",\r\n        },\r\n        {\r\n          value: \"\",\r\n          name: \"Number8\",\r\n        },\r\n      ],\r\n      [\r\n        {\r\n          value: \"\",\r\n          name: \"Number9\",\r\n        },\r\n        {\r\n          value: \"\",\r\n          name: \"Number10\",\r\n        },\r\n        {\r\n          value: \"\",\r\n          name: \"Number11\",\r\n        },\r\n        {\r\n          value: \"\",\r\n          name: \"Number12\",\r\n        },\r\n      ],\r\n      [\r\n        {\r\n          value: \"\",\r\n          name: \"Number13\",\r\n        },\r\n        {\r\n          value: \"\",\r\n          name: \"Number14\",\r\n        },\r\n        {\r\n          value: \"\",\r\n          name: \"Number15\",\r\n        },\r\n        {\r\n          value: \"\",\r\n          name: \"Number16\",\r\n        },\r\n      ],\r\n    ]);\r\n    setInputMode(true);\r\n    setFormTitle(false);\r\n  };\r\n\r\n  const post = async (score) => {\r\n    const date = new Date();\r\n    const month = date.toLocaleString(\"en-US\", { month: \"long\" });\r\n    const day = date.toLocaleString(\"en-US\", { day: \"2-digit\" });\r\n    const year = date.getFullYear();\r\n    const newScore = {\r\n      date: {\r\n        day: day,\r\n        month: month,\r\n        year: year,\r\n      },\r\n      score: score,\r\n    };\r\n    try {\r\n      const resp = await axios.post(\"http://localhost:3001/scores\", newScore);\r\n      console.log(resp.data);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n  const verify = (e) => {\r\n    e.preventDefault();\r\n\r\n    const c = Object.values(e.target).reduce((resultArray, item) => {\r\n      if (item.name && item.value)\r\n        resultArray.push({\r\n          name: item.name,\r\n          value: item.value,\r\n        });\r\n      return resultArray;\r\n    }, []);\r\n    if (c.length === 16) {\r\n      setGussedNumbers([...c]);\r\n      setInputMode(false);\r\n      setFormTitle(\"defaultForm\");\r\n      const correctGussedNumbers = prevNumbers.reduce(\r\n        (resultArray, item, itemIndex) => {\r\n          if (item.value == c[itemIndex].value) {\r\n            console.log(item);\r\n            resultArray.push({\r\n              name: item.name,\r\n              value: item.value,\r\n            });\r\n          }\r\n          return resultArray;\r\n        },\r\n        []\r\n      );\r\n\r\n      setCurrentScore(correctGussedNumbers.length);\r\n      setFormError(false);\r\n\r\n      post(correctGussedNumbers.length);\r\n    } else {\r\n      // e.preventDefault();\r\n      // setFormError(true);\r\n      console.log(\"error\");\r\n    }\r\n  };\r\n  const onRetry = () => {\r\n    setCurrentScore(null);\r\n\r\n    setDefaulNumbers([\r\n      [\r\n        {\r\n          value: Math.floor(Math.random() * 10),\r\n          name: \"Number1\",\r\n        },\r\n        {\r\n          value: Math.floor(Math.random() * 10),\r\n          name: \"Number2\",\r\n        },\r\n        {\r\n          value: Math.floor(Math.random() * 10),\r\n          name: \"Number3\",\r\n        },\r\n        {\r\n          value: Math.floor(Math.random() * 10),\r\n          name: \"Number4\",\r\n        },\r\n      ],\r\n      [\r\n        {\r\n          value: Math.floor(Math.random() * 10),\r\n          name: \"Number5\",\r\n        },\r\n        {\r\n          value: Math.floor(Math.random() * 10),\r\n          name: \"Number6\",\r\n        },\r\n        {\r\n          value: Math.floor(Math.random() * 10),\r\n          name: \"Number7\",\r\n        },\r\n        {\r\n          value: Math.floor(Math.random() * 10),\r\n          name: \"Number8\",\r\n        },\r\n      ],\r\n      [\r\n        {\r\n          value: Math.floor(Math.random() * 10),\r\n          name: \"Number9\",\r\n        },\r\n        {\r\n          value: Math.floor(Math.random() * 10),\r\n          name: \"Number10\",\r\n        },\r\n        {\r\n          value: Math.floor(Math.random() * 10),\r\n          name: \"Number11\",\r\n        },\r\n        {\r\n          value: Math.floor(Math.random() * 10),\r\n          name: \"Number12\",\r\n        },\r\n      ],\r\n      [\r\n        {\r\n          value: Math.floor(Math.random() * 10),\r\n          name: \"Number13\",\r\n        },\r\n        {\r\n          value: Math.floor(Math.random() * 10),\r\n          name: \"Number14\",\r\n        },\r\n        {\r\n          value: Math.floor(Math.random() * 10),\r\n          name: \"Number15\",\r\n        },\r\n        {\r\n          value: Math.floor(Math.random() * 10),\r\n          name: \"Number16\",\r\n        },\r\n      ],\r\n    ]);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.mainCardContainer}>\r\n      <div>\r\n        {currentScore == null ? (\r\n          <div>\r\n            <form\r\n              ref={inputFormRef}\r\n              onSubmit={(e) => (defaultForm ? guess(e) : verify(e))}\r\n            >\r\n              <div className={classes.inputCardContainer}>\r\n                <div className={classes.inputCardWrapper}>\r\n                  <CardWrapper\r\n                    flexDirection={\r\n                      swapCount % 4 === 1 || swapCount % 4 === -3\r\n                        ? \"row-reverse\"\r\n                        : swapCount % 4 === 2 || swapCount % 4 === -2\r\n                        ? \"column-reverse\"\r\n                        : swapCount % 4 === 3 || swapCount % 4 === -1\r\n                        ? \"row\"\r\n                        : \"column\"\r\n                    }\r\n                  >\r\n                    {defaultNumbers.map((row, rowIndex) => (\r\n                      <CardWrapper\r\n                        key={rowIndex.toString()}\r\n                        flexDirection={\r\n                          swapCount % 4 === 1 || swapCount % 4 === -3\r\n                            ? \"column\"\r\n                            : swapCount % 4 === 2 || swapCount % 4 === -2\r\n                            ? \"row-reverse\"\r\n                            : swapCount % 4 === 3 || swapCount % 4 === -1\r\n                            ? \"column-reverse\"\r\n                            : \"row\"\r\n                        }\r\n                      >\r\n                        {row.map((item, itemIndex) => (\r\n                          <input\r\n                            className={classes.input}\r\n                            key={itemIndex.toString()}\r\n                            name={item.name}\r\n                            defaultValue={item.value}\r\n                            disabled={!inputMode}\r\n                            placeholder=\"?\"\r\n                            autoComplete=\"off\"\r\n                          />\r\n                        ))}\r\n                      </CardWrapper>\r\n                    ))}\r\n                  </CardWrapper>\r\n                </div>\r\n                {formError ? (\r\n                  <span style={{ color: \"white\", paddingLeft: 12 }}>\r\n                    Please Guess All Number!!!!\r\n                  </span>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n                <div className={classes.buttonContainer}>\r\n                  <button\r\n                    type=\"submit\"\r\n                    className={classes.playButton}\r\n                    disabled={inputMode}\r\n                  >\r\n                    Guess\r\n                  </button>\r\n\r\n                  <button\r\n                    className={classes.playButton}\r\n                    type=\"submit\"\r\n                    disabled={!inputMode}\r\n                  >\r\n                    Verify\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </form>\r\n            <div className={classes.buttonContainer}>\r\n              <button\r\n                className={\r\n                  inputMode\r\n                    ? `.Mui-disabled ${classes.playButton} `\r\n                    : classes.playButton\r\n                }\r\n                onClick={swapLeft}\r\n                disabled={inputMode}\r\n              >\r\n                Swap Left\r\n              </button>\r\n              <button\r\n                className={classes.playButton}\r\n                onClick={swapRight}\r\n                disabled={inputMode}\r\n              >\r\n                Swap Right\r\n              </button>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div className={classes.scoreContainer}>\r\n            <div className={classes.scoreTextContainer}>\r\n              <h1 style={{ color: \"#6B7483\" }}>Score: {currentScore}</h1>\r\n            </div>\r\n            <button onClick={onRetry} className={classes.playButton}>\r\n              Retry\r\n            </button>\r\n          </div>\r\n        )}\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n          }}\r\n        >\r\n          <Link to=\"/dashboard\">\r\n            <button className={classes.playButton} style={{ width: \"auto\" }}>\r\n              Navigate to DashBoard\r\n            </button>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default InputCard;\r\n",{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":75,"column":10,"nodeType":"73","messageId":"74","endLine":75,"endColumn":21},{"ruleId":"67","replacedBy":"75"},{"ruleId":"69","replacedBy":"76"},{"ruleId":"67","replacedBy":"77"},{"ruleId":"69","replacedBy":"78"},{"ruleId":"71","severity":1,"message":"79","line":3,"column":10,"nodeType":"73","messageId":"74","endLine":3,"endColumn":14},{"ruleId":"80","severity":1,"message":"81","line":102,"column":9,"nodeType":"82","endLine":102,"endColumn":74},{"ruleId":"71","severity":1,"message":"83","line":4,"column":16,"nodeType":"73","messageId":"74","endLine":4,"endColumn":26},{"ruleId":"71","severity":1,"message":"79","line":5,"column":10,"nodeType":"73","messageId":"74","endLine":5,"endColumn":14},{"ruleId":"71","severity":1,"message":"84","line":176,"column":10,"nodeType":"73","messageId":"74","endLine":176,"endColumn":23},{"ruleId":"85","severity":1,"message":"86","line":352,"column":26,"nodeType":"87","messageId":"88","endLine":352,"endColumn":28},"no-native-reassign",["89"],"no-negated-in-lhs",["90"],"no-unused-vars","'searchInput' is assigned a value but never used.","Identifier","unusedVar",["89"],["90"],["89"],["90"],"'fade' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'useHistory' is defined but never used.","'gussedNumbers' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]